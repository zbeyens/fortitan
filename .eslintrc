// Created from ESLint Starter: https://github.com/DominikSerafin/eslint-starter
// ESLint Docs: http://eslint.org/docs/rules/

{
    "extends": ["eslint:recommended", "airbnb"],

    // https://eslint.org/docs/user-guide/configuring#specifying-parser
    "parser": "babel-eslint",

    // https://eslint.org/docs/user-guide/configuring#specifying-parser-options
    "parserOptions": {
        "ecmaVersion": 6,
        "ecmaFeatures": {
            "experimentalObjectRestSpread": true
        }
    },

    "settings": {
        "import/resolver": {
            "webpack": {
                "config": "webpack.config.js"
            }
        }
    },

    // https://eslint.org/docs/user-guide/configuring#specifying-environments
    "env": {
        "browser": true,                         // browser global variables
        "node": true,                            // Node.js global variables and Node.js scoping
        "es6": true,                             // enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6)
        //    "commonjs": false,                    // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack)
        //    "shared-node-browser": false,         // Globals common to both Node and Browser
        //    "worker": false,                      // web workers global variables
        //    "amd": false,                         // defines require() and define() as global variables as per the amd spec
        //    "mocha": false,                       // adds all of the Mocha testing global variables
        //    "jasmine": false,                     // adds all of the Jasmine testing global variables for version 1.3 and 2.0
        //    "jest": false,                        // Jest global variables
        //    "phantomjs": false,                   // PhantomJS global variables
        //    "protractor": false,                  // Protractor global variables
        //    "qunit": false,                       // QUnit globals
        //    "jquery": false,                      // jQuery globals
        //    "prototypejs": false,                 // Prototype.js global variables
        //    "shelljs": false,                     // ShellJS globals
        //    "meteor": false,                      // Meteor globals
        //    "mongo": false,                       // MongoDB globals
        //    "applescript": false,                 // AppleScript global variables
        //    "nashorn": false,                     // Java 8 Nashorn global variables
        //    "serviceworker": false,               // Service Worker global variables
        //    "atomtest": false,                    // Atom test globals
        //    "embertest": false,                   // Ember test globals
        //    "webextensions": false,               // WebExtensions globals
        //    "greasemonkey": false,                // GreaseMonkey globals
    },

    // https://eslint.org/docs/user-guide/configuring#specifying-globals
    "globals": {
        "_": true,
        "PIXI": true,
        "FB": true,
        "google": true,
        "Howl": true,
        "Slider": true,
        "aipPlayer": true,
        "adplayer": true,
        "Phaser": true,
        "Matter": true,
    },

    // https://eslint.org/docs/user-guide/configuring#configuring-plugins
    //  "plugins": [
    //    // e.g. "react" (must run `npm install eslint-plugin-react` first)
    //  ],

    // https://eslint.org/docs/user-guide/configuring#configuring-rules
    // https://eslint.org/docs/rules/
    "rules": {


        ////////// Possible Errors //////////

        "for-direction": 0,                   // enforce “for” loop update clause moving the counter in the right direction.
        "getter-return": 1,                   // enforce return statements in getters
        "no-async-promise-executor": 0,       // disallow using an async function as a Promise executor
        "no-await-in-loop": 0,                // disallow await inside of loops
        "no-compare-neg-zero": 1,             // disallow comparing against -0
        "no-cond-assign": 1,                  // disallow assignment operators in conditional expressions
        "no-console": 0,                      // disallow the use of console
        "no-constant-condition": [2, { "checkLoops": false }],           // disallow constant expressions in conditions
        "no-control-regex": 2,                // disallow control characters in regular expressions
        "no-debugger": 1,                     // disallow the use of debugger
        "no-dupe-args": 2,                    // disallow duplicate arguments in function definitions
        "no-dupe-keys": 2,                    // disallow duplicate keys in object literals
        "no-duplicate-case": 2,               // disallow duplicate case labels
        "no-empty": 0,                        // disallow empty block statements
        "no-empty-character-class": 2,        // disallow empty character classes in regular expressions
        "no-ex-assign": 2,                    // disallow reassigning exceptions in catch clauses
        "no-extra-boolean-cast": 1,           // disallow unnecessary boolean casts
        "no-extra-parens": 1,                 // disallow unnecessary parentheses
        "no-extra-semi": 1,                   // disallow unnecessary semicolons
        "no-func-assign": 2,                  // disallow reassigning function declarations
        "no-inner-declarations": 2,           // disallow variable or function declarations in nested blocks
        "no-invalid-regexp": 2,               // disallow invalid regular expression strings in RegExp constructors
        "no-irregular-whitespace": [1, { "skipComments": true }],         // disallow irregular whitespace outside of strings and comments
        "no-obj-calls": 2,                    // disallow calling global object properties as functions
        "no-prototype-builtins": 0,           // disallow calling some Object.prototype methods directly on objects
        "no-regex-spaces": 2,                 // disallow multiple spaces in regular expressions
        "no-sparse-arrays": 2,                // disallow sparse arrays
        "no-template-curly-in-string": 0,     // disallow template literal placeholder syntax in regular strings
        "no-unexpected-multiline": 2,         // disallow confusing multiline expressions
        "no-unreachable": 2,                  // disallow unreachable code after return, throw, continue, and break statements
        "no-unsafe-finally": 2,               // disallow control flow statements in finally blocks
        "no-unsafe-negation": 2,              // disallow negating the left operand of relational operators
        "use-isnan": 0,                       // require calls to isNaN() when checking for NaN
        "valid-jsdoc": 0,                     // enforce valid JSDoc comments
        "valid-typeof": 2,                    // enforce comparing typeof expressions against valid strings


        ////////// Best Practices //////////

        "accessor-pairs": 0,                  // enforce getter and setter pairs in objects
        "array-callback-return": 0,           // enforce return statements in callbacks of array methods
        "block-scoped-var": 0,                // enforce the use of variables within the scope they are defined
        "class-methods-use-this": 0,          // enforce that class methods utilize this
        "complexity": 0,                      // enforce a maximum cyclomatic complexity allowed in a program
        "consistent-return": 0,               // require return statements to either always or never specify values
        "curly": 0,                           // enforce consistent brace style for all control statements
        "default-case": 0,                    // require default cases in switch statements
        "dot-location": 0,                    // enforce consistent newlines before and after dots
        "dot-notation": 1,                    // enforce dot notation whenever possible
        "eqeqeq": 1,                          // require the use of === and !==
        "guard-for-in": 0,                    // require for-in loops to include an if statement
        "max-classes-per-file": [1, 1],       // enforce a maximum number of classes per file
        "no-alert": 0,                        // disallow the use of alert, confirm, and prompt
        "no-caller": 0,                       // disallow the use of arguments.caller or arguments.callee
        "no-case-declarations": 0,            // disallow lexical declarations in case clauses
        "no-div-regex": 0,                    // disallow division operators explicitly at the beginning of regular expressions
        "no-else-return": 0,                  // disallow else blocks after return statements in if statements
        "no-empty-function": 0,               // disallow empty functions
        "no-empty-pattern": 0,                // disallow empty destructuring patterns
        "no-eq-null": 0,                      // disallow null comparisons without type-checking operators
        "no-eval": 0,                         // disallow the use of eval()
        "no-extend-native": 0,                // disallow extending native types
        "no-extra-bind": 1,                   // disallow unnecessary calls to .bind()
        "no-extra-label": 0,                  // disallow unnecessary labels
        "no-fallthrough": 2,                  // disallow fallthrough of case statements
        "no-floating-decimal": 0,             // disallow leading or trailing decimal points in numeric literals
        "no-global-assign": 2,                // disallow assignments to native objects or read-only global variables
        "no-implicit-coercion": 0,            // disallow shorthand type conversions
        "no-implicit-globals": 0,             // disallow variable and function declarations in the global scope
        "no-implied-eval": 0,                 // disallow the use of eval()-like methods
        "no-invalid-this": 0,                 // disallow this keywords outside of classes or class-like objects
        "no-iterator": 0,                     // disallow the use of the __iterator__ property
        "no-labels": 0,                       // disallow labeled statements
        "no-lone-blocks": 2,                  // disallow unnecessary nested blocks
        "no-loop-func": 0,                    // disallow function declarations and expressions inside loop statements
        "no-magic-numbers": [1, { "ignore": [-1, 0, 0.5, 1, 2, 10, 60, 100, 180, 360, 1000], "ignoreArrayIndexes": true}],                // disallow magic numbers
        "no-multi-spaces": 1,                 // disallow multiple spaces
        "no-multi-str": 0,                    // disallow multiline strings
        "no-new": 0,                          // disallow new operators outside of assignments or comparisons
        "no-new-func": 0,                     // disallow new operators with the Function object
        "no-new-wrappers": 0,                 // disallow new operators with the String, Number, and Boolean objects
        "no-octal": 0,                        // disallow octal literals
        "no-octal-escape": 0,                 // disallow octal escape sequences in string literals
        "no-param-reassign": 0,               // disallow reassigning function parameters
        "no-proto": 0,                        // disallow the use of the __proto__ property
        "no-redeclare": 2,                    // disallow variable redeclaration
        "no-restricted-properties": 0,        // disallow certain properties on certain objects
        "no-return-assign": 0,                // disallow assignment operators in return statements
        "no-return-await": 0,                 // disallow unnecessary return await
        "no-script-url": 0,                   // disallow javascript: urls
        "no-self-assign": 1,                  // disallow assignments where both sides are exactly the same
        "no-self-compare": 1,                 // disallow comparisons where both sides are exactly the same
        "no-sequences": 0,                    // disallow comma operators
        "no-throw-literal": 0,                // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": 0,    // disallow unmodified loop conditions
        "no-unused-expressions": 1,           // disallow unused expressions
        "no-unused-labels": 0,                // disallow unused labels
        "no-useless-call": 1,                 // disallow unnecessary calls to .call() and .apply()
        "no-useless-concat": 0,               // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 0,               // disallow unnecessary escape characters
        "no-useless-return": 0,               // disallow redundant return statements
        "no-void": 0,                         // disallow void operators
        "no-warning-comments": 0,             // disallow specified warning terms in comments
        "no-with": 0,                         // disallow with statements
        "prefer-promise-reject-errors": 0,    // require using Error objects as Promise rejection reasons
        "radix": 0,                           // enforce the consistent use of the radix argument when using parseInt()
        "require-await": 0,                   // disallow async functions which have no await expression
        "vars-on-top": 0,                     // require var declarations be placed at the top of their containing scope
        "wrap-iife": 0,                       // require parentheses around immediate function invocations
        "yoda": 0,                            // require or disallow “Yoda” conditions


        ////////// Strict Mode //////////

        "strict": 0,                          // require or disallow strict mode directives


        ////////// Variables //////////

        "init-declarations": 0,               // require or disallow initialization in variable declarations
        "no-delete-var": 2,                   // disallow deleting variables
        "no-label-var": 0,                    // disallow labels that share a name with a variable
        "no-restricted-globals": 0,           // disallow specified global variables
        "no-shadow": 0,                       // disallow variable declarations from shadowing variables declared in the outer scope
        "no-shadow-restricted-names": 0,      // disallow identifiers from shadowing restricted names
        "no-undef": 2,                        // disallow the use of undeclared variables unless mentioned in /*global */ comments
        "no-undef-init": 1,                   // disallow initializing variables to undefined
        "no-undefined": 2,                    // disallow the use of undefined as an identifier
        "no-unused-vars": [1, {"args": "none", "caughtErrors": "none" }],                  // disallow unused variables
        "no-use-before-define": 2,            // disallow the use of variables before they are defined


        ////////// Node.js and CommonJS //////////

        "callback-return": 0,                 // require return statements after callbacks
        "global-require": 0,                  // require require() calls to be placed at top-level module scope
        "handle-callback-err": 0,             // require error handling in callbacks
        "no-buffer-constructor": 0,           // disallow use of the Buffer() constructor
        "no-mixed-requires": 0,               // disallow require calls to be mixed with regular variable declarations
        "no-new-require": 0,                  // disallow new operators with calls to require
        "no-path-concat": 0,                  // disallow string concatenation with __dirname and __filename
        "no-process-env": 0,                  // disallow the use of process.env
        "no-process-exit": 0,                 // disallow the use of process.exit()
        "no-restricted-modules": 0,           // disallow specified modules when loaded by require
        "no-sync": 0,                         // disallow synchronous methods


        ////////// Stylistic Issues //////////

        "array-bracket-newline": 0,           // enforce linebreaks after opening and before closing array brackets
        "array-bracket-spacing": 0,           // enforce consistent spacing inside array brackets
        "array-element-newline": 0,           // enforce line breaks after each array element
        "block-spacing": 1,                   // disallow or enforce spaces inside of blocks after opening block and before closing block
        "brace-style": 0,                     // enforce consistent brace style for blocks
        "camelcase": 1,                       // enforce camelcase naming convention
        "capitalized-comments": 0,            // enforce or disallow capitalization of the first letter of a comment
        "comma-dangle": 0,                    // require or disallow trailing commas
        "comma-spacing": [2, { "before": false, "after": true }],                   // enforce consistent spacing before and after commas
        "comma-style": 0,                     // enforce consistent comma style
        "computed-property-spacing": 1,       // enforce consistent spacing inside computed property brackets
        "consistent-this": 0,                 // enforce consistent naming when capturing the current execution context
        "eol-last": 0,                        // require or disallow newline at the end of files
        "func-call-spacing": 1,               // require or disallow spacing between function identifiers and their invocations
        "func-name-matching": 0,              // require function names to match the name of the variable or property to which they are assigned
        "func-names": [2, "never"],                      // require or disallow named function expressions
        "func-style": 0,                      // enforce the consistent use of either function declarations or expressions
        "function-paren-newline": 0,          // enforce consistent line breaks inside function parentheses
        "id-blacklist": 0,                    // disallow specified identifiers
        "id-length": 0,                       // enforce minimum and maximum identifier lengths
        "id-match": 0,                        // require identifiers to match a specified regular expression
        "implicit-arrow-linebreak": 0,        // enforce the location of arrow function bodies
        "indent": [0, "tab"],                          // enforce consistent indentation
        "jsx-quotes": 0,                      // enforce the consistent use of either double or single quotes in JSX attributes
        "key-spacing": 1,                     // enforce consistent spacing between keys and values in object literal properties
        "keyword-spacing": 1,                 // enforce consistent spacing before and after keywords
        "line-comment-position": 0,           // enforce position of line comments
        "linebreak-style": 0,                 // enforce consistent linebreak style
        "lines-around-comment": 0,            // require empty lines around comments
        "lines-between-class-members": 1,     // require or disallow an empty line between class members
        "max-depth": 0,                       // enforce a maximum depth that blocks can be nested
        "max-len": 0,                         // enforce a maximum line length
        "max-lines": 0,                       // enforce a maximum number of lines per file
        "max-lines-per-function": 0,          // enforce a maximum number of line of code in a function
        "max-nested-callbacks": 0,            // enforce a maximum depth that callbacks can be nested
        "max-params": 0,                      // enforce a maximum number of parameters in function definitions
        "max-statements": 0,                  // enforce a maximum number of statements allowed in function blocks
        "max-statements-per-line": 0,         // enforce a maximum number of statements allowed per line
        "multiline-comment-style": 0,         // enforce a particular style for multiline comments
        "multiline-ternary": 0,               // enforce newlines between operands of ternary expressions
        "new-cap": 1,                         // require constructor names to begin with a capital letter
        "new-parens": 0,                      // require parentheses when invoking a constructor with no arguments
        "newline-per-chained-call": 0,        // require a newline after each call in a method chain
        "no-array-constructor": 0,            // disallow Array constructors
        "no-bitwise": 0,                      // disallow bitwise operators
        "no-continue": 0,                     // disallow continue statements
        "no-inline-comments": 0,              // disallow inline comments after code
        "no-lonely-if": 0,                    // disallow if statements as the only statement in else blocks
        "no-mixed-operators": 0,              // disallow mixed binary operators
        "no-mixed-spaces-and-tabs": 1,        // disallow mixed spaces and tabs for indentation
        "no-multi-assign": 0,                 // disallow use of chained assignment expressions
        "no-multiple-empty-lines": 0,         // disallow multiple empty lines
        "no-negated-condition": 0,            // disallow negated conditions
        "no-nested-ternary": 0,               // disallow nested ternary expressions
        "no-new-object": 0,                   // disallow Object constructors
        "no-plusplus": 0,                     // disallow the unary operators ++ and --
        "no-restricted-syntax": 0,            // disallow specified syntax
        "no-tabs": 0,                         // disallow all tabs
        "no-ternary": 0,                      // disallow ternary operators
        "no-trailing-spaces": 0,              // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 0,            // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 0,             // disallow ternary operators when simpler alternatives exist
        "no-whitespace-before-property": 1,   // disallow whitespace before properties
        "nonblock-statement-body-position": 0,// enforce the location of single-line statements
        "object-curly-newline": 0,            // enforce consistent line breaks inside braces
        "object-curly-spacing": 1,            // enforce consistent spacing inside braces
        "object-property-newline": 0,         // enforce placing object properties on separate lines
        "one-var": 0,                         // enforce variables to be declared either together or separately in functions
        "one-var-declaration-per-line": 0,    // require or disallow newlines around variable declarations
        "operator-assignment": 0,             // require or disallow assignment operator shorthand where possible
        "operator-linebreak": 0,              // enforce consistent linebreak style for operators
        "padded-blocks": 0,                   // require or disallow padding within blocks
        "padding-line-between-statements": 0, // require or disallow padding lines between statements
        "prefer-object-spread": 0,            // disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.
        "quote-props": 0,                     // require quotes around object literal property names
        "quotes": 0,                          // enforce the consistent use of either backticks, double, or single quotes
        "require-jsdoc": 0,                   // require JSDoc comments
        "semi": 1,                            // require or disallow semicolons instead of ASI
        "semi-spacing": 1,                    // enforce consistent spacing before and after semicolons
        "semi-style": 0,                      // enforce location of semicolons
        "sort-keys": 0,                       // require object keys to be sorted
        "sort-vars": 0,                       // require variables within the same declaration block to be sorted
        "space-before-blocks": 1,             // enforce consistent spacing before blocks
        "space-before-function-paren": 0,     // enforce consistent spacing before function definition opening parenthesis
        "space-in-parens": 1,                 // enforce consistent spacing inside parentheses
        "space-infix-ops": 0,                 // require spacing around infix operators
        "space-unary-ops": 0,                 // enforce consistent spacing before or after unary operators
        "spaced-comment": [0, "always"],                  // enforce consistent spacing after the // or /* in a comment
        "switch-colon-spacing": 0,            // enforce spacing around colons of switch statements
        "template-tag-spacing": 0,            // require or disallow spacing between template tags and their literals
        "unicode-bom": 0,                     // require or disallow Unicode byte order mark (BOM)
        "wrap-regex": 0,                      // require parenthesis around regex literals


        ////////// ECMAScript 6 //////////

        "arrow-body-style": 0,                // require braces around arrow function bodies
        "arrow-parens": 0,                    // require parentheses around arrow function arguments
        "arrow-spacing": 1,                   // enforce consistent spacing before and after the arrow in arrow functions
        "constructor-super": 1,               // require super() calls in constructors
        "generator-star-spacing": 0,          // enforce consistent spacing around * operators in generator functions
        "no-class-assign": 2,                 // disallow reassigning class members
        "no-confusing-arrow": 0,              // disallow arrow functions where they could be confused with comparisons
        "no-const-assign": 2,                 // disallow reassigning const variables
        "no-dupe-class-members": 2,           // disallow duplicate class members
        "no-duplicate-imports": 2,            // disallow duplicate module imports
        "no-new-symbol": 2,                   // disallow new operators with the Symbol object
        "no-restricted-imports": 0,           // disallow specified modules when loaded by import
        "no-this-before-super": 2,            // disallow this/super before calling super() in constructors
        "no-useless-computed-key": 1,         // disallow unnecessary computed property keys in object literals
        "no-useless-constructor": 1,          // disallow unnecessary constructors
        "no-useless-rename": 1,               // disallow renaming import, export, and destructured assignments to the same name
        "no-var": 1,                          // require let or const instead of var
        "object-shorthand": 1,                // require or disallow method and property shorthand syntax for object literals
        "prefer-arrow-callback": 1,           // require using arrow functions for callbacks
        "prefer-const": 1,                    // require const declarations for variables that are never reassigned after declared
        "prefer-destructuring": 0,            // require destructuring from arrays and/or objects
        "prefer-numeric-literals": 0,         // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": 0,              // require rest parameters instead of arguments
        "prefer-spread": 0,                   // require spread operators instead of .apply()
        "prefer-template": 0,                 // require template literals instead of string concatenation
        "require-yield": 0,                   // require generator functions to contain yield
        "rest-spread-spacing": 0,             // enforce spacing between rest and spread operators and their expressions
        "sort-imports": 0,                    // enforce sorted import declarations within modules
        "symbol-description": 0,              // require symbol descriptions
        "template-curly-spacing": 0,          // require or disallow spacing around embedded expressions of template strings
        "yield-star-spacing": 0,              // require or disallow spacing around the * in yield* expressions

        "import/extensions": 1,

        ////////// React / JXS //////////

        // The following rules overwrite the AirBnB rules for React:
        // https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/react.js

        // Enforce label tags have htmlFor attribute.
        // Disable rule to allow a surrounding label: <label><input /></label>
        // https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/label-has-for.md
        "jsx-a11y/label-has-for": 0,


        "react/boolean-prop-naming": 0,                 // Enforces consistent naming for boolean props
        "react/button-has-type": 0,                     // Forbid "button" element without an explicit "type" attribute
        "react/default-props-match-prop-types": 0,      // Prevent extraneous defaultProps on components
        "react/destructuring-assignment": 0,            // Rule enforces consistent usage of destructuring assignment in component
        "react/display-name": 0,                        // Prevent missing displayName in a React component definition
        "react/forbid-component-props": 0,              // Forbid certain props on Components
        "react/forbid-dom-props": 0,                    // Forbid certain props on DOM Nodes
        "react/forbid-elements": 0,                     // Forbid certain elements
        "react/forbid-foreign-prop-types": 0,           // Forbid foreign propTypes
        "react/no-access-state-in-setstate": 0,         // Prevent using this.state inside this.setState
        "react/no-array-index-key": 0,                  // Prevent using Array index in key props
        "react/no-children-prop": 0,                    // Prevent passing children as props
        "react/no-danger": 0,                           // Prevent usage of dangerous JSX properties
        "react/no-danger-with-children": 0,             // Prevent problem with children and props.dangerouslySetInnerHTML
        "react/no-deprecated": 0,                       // Prevent usage of deprecated methods, including component lifecyle methods
        "react/no-did-mount-set-state": 0,              // Prevent usage of setState in componentDidMount
        "react/no-did-update-set-state": 0,             // Prevent usage of setState in componentDidUpdate
        "react/no-direct-mutation-state": 0,            // Prevent direct mutation of this.state
        "react/no-is-mounted": 0,                       // Prevent usage of isMounted
        "react/no-multi-comp": 0,                       // Prevent multiple component definition per file
        "react/no-redundant-should-component-update": 0,    // Prevent usage of shouldComponentUpdate when extending React.PureComponent
        "react/no-render-return-value": 0,              // Prevent usage of the return value of React.render
        "react/no-set-state": 0,                        // Prevent usage of setState
        "react/no-typos": 0,                            // Prevent common casing typos
        "react/no-this-in-sfc": 0,                      // Prevent using this in stateless functional components
        "react/no-unescaped-entities": 0,               // Prevent invalid characters from appearing in markup
        "react/no-unknown-property": 0,                 // Prevent usage of unknown DOM property (fixable)
        "react/no-unsafe": 0,                           // Prevent usage of UNSAFE_ methods
        "react/no-unused-prop-types": 0,                // Prevent definitions of unused prop types
        "react/no-unused-state": 0,                     // Prevent definitions of unused state properties
        "react/no-will-update-set-state": 0,            // Prevent usage of setState in componentWillUpdate
        "react/prefer-es6-class": 0,                    // Enforce ES5 or ES6 class for React Components
        "react/prop-types": 0,                          // Prevent missing props validation in a React component definition
        "react/react-in-jsx-scope": 0,                  // Prevent missing React when using JSX
        "react/require-optimization": 0,                // Enforce React components to have a shouldComponentUpdate method
        "react/require-render-return": 0,               // Enforce ES5 or ES6 class for returning value in render function
        "react/self-closing-comp": 0,                   // Prevent extra closing tags for components without children (fixable)
        "react/sort-comp": 0,                           // Enforce component methods order (fixable)
        "react/sort-prop-types": 0,                     // Enforce propTypes declarations alphabetical sorting
        "react/style-prop-object": 0,                   // Enforce style prop value being an object
        "react/void-dom-elements-no-children": 0,       // Prevent void DOM elements (e.g. <img />, <br />) from receiving children

        "react/jsx-boolean-value": 0,               // Enforce boolean attributes notation in JSX (fixable)
        "react/jsx-child-element-spacing": 0,       // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions.
        "react/jsx-closing-tag-location": 0,        // Validate closing tag location in JSX (fixable)
        "react/jsx-curly-spacing": 0,               // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions (fixable)
        "react/jsx-equals-spacing": 0,              // Enforce or disallow spaces around equal signs in JSX attributes (fixable)
        "react/jsx-handler-names": 0,               // Enforce event handler naming conventions in JSX
        "react/jsx-indent": 0,                      // Validate JSX indentation (fixable)
        "react/jsx-indent-props": 0,                // Validate props indentation in JSX (fixable)
        "react/jsx-key": 0,                         // Validate JSX has key prop when in array or iterator
        "react/jsx-max-depth": 0,                   // Validate JSX maximum depth
        "react/jsx-max-props-per-line": 0,          // Limit maximum of props on a single line in JSX (fixable)
        "react/jsx-no-bind": 0,                     // Prevent usage of .bind() and arrow functions in JSX props
        "react/jsx-no-comment-textnodes": 0,        // Prevent comments from being inserted as text nodes
        "react/jsx-no-literals": 0,                 // Prevent usage of unwrapped JSX strings
        "react/jsx-no-target-blank": 0,             // Prevent usage of unsafe target='_blank'
        "react/jsx-no-undef": 0,                    // Disallow undeclared variables in JSX
        "react/jsx-one-expression-per-line": 0,     // Limit to one expression per line in JSX
        "react/jsx-curly-brace-presence": 0,        // Enforce curly braces or disallow unnecessary curly braces in JSX
        "react/jsx-pascal-case": 0,                 // Enforce PascalCase for user-defined JSX components
        "react/jsx-props-no-multi-spaces": 0,       // Disallow multiple spaces between inline JSX props (fixable)
        "react/jsx-sort-default-props": 0,          // Enforce default props alphabetical sorting
        "react/jsx-sort-props": 0,                  // Enforce props alphabetical sorting (fixable)
        "react/jsx-space-before-closing": 0,        // Validate spacing before closing bracket in JSX (fixable)
        "react/jsx-tag-spacing": 0,                 // Validate whitespace in and around the JSX opening and closing brackets (fixable)
        "react/jsx-uses-react": 0,                  // Prevent React to be incorrectly marked as unused
        "react/jsx-uses-vars": 0,                   // Prevent variables used in JSX to be incorrectly marked as unused


        // Validate closing bracket location in JSX
        // On the same line of the the last prop:
        // <Foo prop1='value'
        //   prop2='value'/>
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
        "react/jsx-closing-bracket-location": [2, "after-props"],
        // Restrict file extensions that may contain JSX
        // Disable rule since we’re using JSX in .js files
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
        "react/jsx-filename-extension": 0,
        // Configure the position of the first property
        // Disable rule
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md
        "react/jsx-first-prop-new-line": 0,
        // Prevent missing parentheses around multilines JSX
        // Disable rule to allow for `return <div>\n…\n</div>;`
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md
        "react/jsx-wrap-multilines": 0,
        // Prevent duplicate props in JSX
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md
        "react/jsx-no-duplicate-props": 2,
        // Prevent usage of findDOMNode
        // Disable rule since using findDOMNode is fine for now and a ref solution isn’t better
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md
        "react/no-find-dom-node": 0,
        // Prevent using string references
        // Disable rule since refs are fine for now and the alternative is horrible indirection
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md
        "react/no-string-refs": 0,
        // Enforce stateless React Components to be written as a pure function
        // Disable rule because React TestUtils only work well with normal components
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md
        "react/prefer-stateless-function": 0,
        // Forbid certain propTypes
        // Disable rule to allow PropTypes.array and PropTypes.object
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md
        "react/forbid-prop-types": 0,
        // Enforce a defaultProps definition for every optional prop
        // Disable rule
        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-default-props.md
        "react/require-default-props": 0,

    }
}
